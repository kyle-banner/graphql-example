enum Practice {
  TE,
  DA,
  DL,
  BAS,
  AC,
}

enum Title {
  AN,
  CO,
  SA,
  CM,
  PC,
  SP,
  PAL,
  PAD,
  MD,
  GM,
}

type Name {
  firstName: String
  lastName: String
}

input NameInput {
  firstName: String
  lastName: String
}

type Employee {
  id: String
  name: Name
  title: Title!
  email: String!
  practice: Practice!
}

input CreateEmployeeInput {
  name: NameInput
  employerName: String
  title: Title
  email: String
  practice: Practice
}

input DeleteEmployeeInput {
  id: String
}

input UpdateEmployeeInput {
  id: String
  name: NameInput
  employerName: String
  title: Title
  email: String
  practice: Practice
}

type DeleteEmployeePayload {
  success: Boolean!
}

type CreateEmployeePayload {
  url: String
}

type UpdateEmployeePayload {
  url: String
}

extend type Mutation {
  """
  Create employee with request body
  """
  createEmployee(input: CreateEmployeeInput!): CreateEmployeePayload
  """
  Delete employee with employee id
  """
  deleteEmployee(input: DeleteEmployeeInput!): DeleteEmployeePayload
  """
  Update employee with employee id
  """
  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload
}

extend type Query {
  """
  Retrieve employee by id
  """
  employee(id: String): Employee
  """
  Retrieve all employees
  """
  employees: [Employee]
}
